BEGIN;

-- Step 1: Create a temporary backup of the original phrase mapping data.
CREATE TABLE public.vocabulary_phrases_backup AS TABLE public.vocabulary_phrases;

-- Step 2: Create the new tables required for the SRS schema.
-- The abstract "concept" table
CREATE TABLE public.phrases (
    phrase_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    concept_description text,
    created_at timestamptz DEFAULT now()
);

-- The many-to-many mapping table for lessons and phrases
CREATE TABLE public.lesson_phrases (
    lesson_phrase_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lesson_id integer NOT NULL REFERENCES public.lessons(lesson_id) ON DELETE CASCADE,
    phrase_id integer NOT NULL REFERENCES public.phrases(phrase_id) ON DELETE CASCADE,
    phrase_order integer NOT NULL,
    CONSTRAINT unique_phrase_in_lesson UNIQUE (lesson_id, phrase_id)
);

-- The new SRS data table for tracking user progress per phrase, per language
CREATE TABLE public.user_srs_data (
    user_srs_data_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    profile_id uuid NOT NULL REFERENCES public.student_profiles(profile_id) ON DELETE CASCADE,
    phrase_id integer NOT NULL REFERENCES public.phrases(phrase_id) ON DELETE CASCADE,
    language_code character varying NOT NULL REFERENCES public.languages(language_code) ON DELETE CASCADE,
    due_at timestamptz NOT NULL DEFAULT now(),
    "interval" real NOT NULL DEFAULT 0,
    ease_factor real NOT NULL DEFAULT 2.5,
    repetitions integer NOT NULL DEFAULT 0,
    last_reviewed_at timestamptz,
    CONSTRAINT unique_user_phrase_language_srs UNIQUE (profile_id, phrase_id, language_code)
);

-- Step 3: Migrate the data from the backup into the new structure.
-- We use OVERRIDING SYSTEM VALUE to preserve the original IDs in the new `phrases` table.
INSERT INTO public.phrases (phrase_id, concept_description, created_at)
OVERRIDING SYSTEM VALUE
SELECT id, concept_description, created_at FROM public.vocabulary_phrases_backup;

-- Update the sequence for the new phrases table to avoid future ID collisions.
SELECT setval('public.phrases_phrase_id_seq', (SELECT max(id) FROM public.vocabulary_phrases_backup));

-- Populate the new lesson-to-phrase mapping table.
INSERT INTO public.lesson_phrases (lesson_id, phrase_id, phrase_order)
SELECT lesson_id, id, phrase_order FROM public.vocabulary_phrases_backup;

-- Step 4: "Re-wire" the foreign keys of existing tables to point to the new `phrases` table.
ALTER TABLE public.phrase_versions DROP CONSTRAINT phrase_versions_phrase_id_fkey;
ALTER TABLE public.phrase_versions ADD CONSTRAINT phrase_versions_phrase_id_fkey FOREIGN KEY (phrase_id) REFERENCES public.phrases(phrase_id) ON DELETE CASCADE;

ALTER TABLE public.dictation_attempts DROP CONSTRAINT dictation_attempts_phrase_id_fkey;
ALTER TABLE public.dictation_attempts ADD CONSTRAINT dictation_attempts_phrase_id_fkey FOREIGN KEY (phrase_id) REFERENCES public.phrases(phrase_id) ON DELETE SET NULL;

ALTER TABLE public.speech_attempts DROP CONSTRAINT speech_attempts_phrase_id_fkey;
ALTER TABLE public.speech_attempts ADD CONSTRAINT speech_attempts_phrase_id_fkey FOREIGN KEY (phrase_id) REFERENCES public.phrases(phrase_id) ON DELETE SET NULL;

ALTER TABLE public.user_phrase_progress DROP CONSTRAINT user_phrase_progress_phrase_id_fkey;
ALTER TABLE public.user_phrase_progress ADD CONSTRAINT user_phrase_progress_phrase_id_fkey FOREIGN KEY (phrase_id) REFERENCES public.phrases(phrase_id) ON DELETE CASCADE;

ALTER TABLE public.user_points_log DROP CONSTRAINT user_points_log_related_phrase_id_fkey;
ALTER TABLE public.user_points_log ADD CONSTRAINT user_points_log_related_phrase_id_fkey FOREIGN KEY (related_phrase_id) REFERENCES public.phrases(phrase_id) ON DELETE SET NULL;

-- Step 5: Clean up by dropping the old and temporary tables.
DROP TABLE public.vocabulary_phrases;
DROP TABLE public.vocabulary_phrases_backup;

-- Step 6 (Optional but Recommended): Drop the now-obsolete `total_phrases` column from the lessons table.
-- The source of truth is now `(SELECT COUNT(*) FROM lesson_phrases WHERE lesson_id = ...)`.
ALTER TABLE public.lessons DROP COLUMN total_phrases;

COMMIT;